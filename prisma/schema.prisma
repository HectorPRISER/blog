// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  slug    String  @unique
  title   String?
  commentaire  String?
  image String?
  like String?
  author  User @relation(fields: [authorId], references: [id])
  authorId  String @db.ObjectId
  comments  Comment[]
}

model Comment {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  post  Post @relation(fields: [PostId], references: [id])
  PostId  String @db.ObjectId
  user  User @relation(fields: [AuthorId], references: [id])
  AuthorId String @db.ObjectId
  like String
}

model User {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  email          String     @unique
  firstName      String?
  lastName       String?
  address        Address?
  dateOfBirth    DateTime?
  posts          Post[]
  hashedPassword String
  comments       Comment[]
  accounts      Account[]
  sessions      Session[]
}


type Address {
  street  String
  city  String
  state   String
  zip   String
}

model VerificationToken {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}